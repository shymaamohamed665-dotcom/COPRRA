version: '3.8'

services:
    # Load Balancer
    nginx:
        image: nginx:alpine
        container_name: coprra_nginx
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
            - ./ssl:/etc/ssl
            - ./logs/nginx:/var/log/nginx
        depends_on:
            - app1
            - app2
            - app3
        networks:
            - coprra_network
        restart: unless-stopped

    # Application Servers (Scalable)
    app1:
        build: .
        container_name: coprra_app_1
        environment:
            - APP_ENV=production
            - APP_DEBUG=false
            - DB_HOST=mysql
            - REDIS_HOST=redis
            - QUEUE_CONNECTION=redis
        volumes:
            - ./storage:/var/www/html/storage
            - ./logs/app:/var/www/html/storage/logs
        depends_on:
            - mysql
            - redis
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            replicas: 1
            resources:
                limits:
                    cpus: '1.0'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M

    app2:
        build: .
        container_name: coprra_app_2
        environment:
            - APP_ENV=production
            - APP_DEBUG=false
            - DB_HOST=mysql
            - REDIS_HOST=redis
            - QUEUE_CONNECTION=redis
        volumes:
            - ./storage:/var/www/html/storage
            - ./logs/app:/var/www/html/storage/logs
        depends_on:
            - mysql
            - redis
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            replicas: 1
            resources:
                limits:
                    cpus: '1.0'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M

    app3:
        build: .
        container_name: coprra_app_3
        environment:
            - APP_ENV=production
            - APP_DEBUG=false
            - DB_HOST=mysql
            - REDIS_HOST=redis
            - QUEUE_CONNECTION=redis
        volumes:
            - ./storage:/var/www/html/storage
            - ./logs/app:/var/www/html/storage/logs
        depends_on:
            - mysql
            - redis
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            replicas: 1
            resources:
                limits:
                    cpus: '1.0'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M

    # Database Cluster
    mysql:
        image: mysql:8.0
        container_name: coprra_mysql
        environment:
            - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
            - MYSQL_DATABASE=${DB_DATABASE}
            - MYSQL_USER=${DB_USERNAME}
            - MYSQL_PASSWORD=${DB_PASSWORD}
        volumes:
            - mysql_data:/var/lib/mysql
            - ./mysql/conf.d:/etc/mysql/conf.d
            - ./mysql/init:/docker-entrypoint-initdb.d
        ports:
            - '3306:3306'
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            resources:
                limits:
                    cpus: '2.0'
                    memory: 4G
                reservations:
                    cpus: '1.0'
                    memory: 2G

    # Redis Cluster
    redis:
        image: redis:7-alpine
        container_name: coprra_redis
        command: redis-server --appendonly yes --replica-read-only no
        volumes:
            - redis_data:/data
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
        ports:
            - '6379:6379'
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            resources:
                limits:
                    cpus: '1.0'
                    memory: 2G
                reservations:
                    cpus: '0.5'
                    memory: 1G

    # Queue Workers (Scalable)
    queue_worker1:
        build: .
        container_name: coprra_queue_1
        command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
        environment:
            - APP_ENV=production
            - DB_HOST=mysql
            - REDIS_HOST=redis
            - QUEUE_CONNECTION=redis
        volumes:
            - ./storage:/var/www/html/storage
        depends_on:
            - mysql
            - redis
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            replicas: 2
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M

    queue_worker2:
        build: .
        container_name: coprra_queue_2
        command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
        environment:
            - APP_ENV=production
            - DB_HOST=mysql
            - REDIS_HOST=redis
            - QUEUE_CONNECTION=redis
        volumes:
            - ./storage:/var/www/html/storage
        depends_on:
            - mysql
            - redis
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            replicas: 2
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M

    # Scheduler
    scheduler:
        build: .
        container_name: coprra_scheduler
        command: php artisan schedule:work
        environment:
            - APP_ENV=production
            - DB_HOST=mysql
            - REDIS_HOST=redis
        volumes:
            - ./storage:/var/www/html/storage
        depends_on:
            - mysql
            - redis
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            replicas: 1
            resources:
                limits:
                    cpus: '0.25'
                    memory: 256M
                reservations:
                    cpus: '0.1'
                    memory: 128M

    # Monitoring
    prometheus:
        image: prom/prometheus:latest
        container_name: coprra_prometheus
        ports:
            - '9090:9090'
        volumes:
            - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=200h'
            - '--web.enable-lifecycle'
        networks:
            - coprra_network
        restart: unless-stopped

    grafana:
        image: grafana/grafana:latest
        container_name: coprra_grafana
        ports:
            - '3000:3000'
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
        volumes:
            - grafana_data:/var/lib/grafana
            - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
        networks:
            - coprra_network
        restart: unless-stopped

    # Log Aggregation
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        container_name: coprra_elasticsearch
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        ports:
            - '9200:9200'
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            resources:
                limits:
                    cpus: '2.0'
                    memory: 2G
                reservations:
                    cpus: '1.0'
                    memory: 1G

    kibana:
        image: docker.elastic.co/kibana/kibana:8.8.0
        container_name: coprra_kibana
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        ports:
            - '5601:5601'
        depends_on:
            - elasticsearch
        networks:
            - coprra_network
        restart: unless-stopped

    # File Storage
    minio:
        image: minio/minio:latest
        container_name: coprra_minio
        command: server /data --console-address ":9001"
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
        volumes:
            - minio_data:/data
        ports:
            - '9000:9000'
            - '9001:9001'
        networks:
            - coprra_network
        restart: unless-stopped

    # Backup Service
    backup:
        build: .
        container_name: coprra_backup
        command: php artisan backup:run
        environment:
            - APP_ENV=production
            - DB_HOST=mysql
            - REDIS_HOST=redis
        volumes:
            - ./backups:/var/www/html/storage/backups
            - ./storage:/var/www/html/storage
        depends_on:
            - mysql
            - redis
        networks:
            - coprra_network
        restart: unless-stopped
        deploy:
            replicas: 1
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M

volumes:
    mysql_data:
        driver: local
    redis_data:
        driver: local
    prometheus_data:
        driver: local
    grafana_data:
        driver: local
    elasticsearch_data:
        driver: local
    minio_data:
        driver: local

networks:
    coprra_network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16
