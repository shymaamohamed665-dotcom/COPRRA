name: Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 3 * * *' # Run daily at 3 AM
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo_mysql, tokenizer, xml, gd, zip
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Prepare Laravel directories
        run: |
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          chmod -R 777 storage bootstrap/cache

      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-progress --no-ansi --optimize-autoloader

      - name: Install NPM Dependencies
        run: npm ci

      - name: Setup Laravel
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ":memory:"
          CACHE_DRIVER: array
          SESSION_DRIVER: array
          QUEUE_CONNECTION: sync

      - name: Run Composer Security Audit
        run: composer audit --format=json > composer-security-report.json

      - name: Run NPM Security Audit
        run: npm audit --json > npm-security-report.json

      - name: Run PHPStan Security Rules
        run: vendor/bin/phpstan analyse --memory-limit=1G --configuration=phpstan.neon
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ":memory:"

      - name: Run Psalm Security Analysis
        run: vendor/bin/psalm --config=psalm.xml --taint-analysis || true

      - name: Run PHPMD Security Rules
        run: vendor/bin/phpmd app text cleancode,unusedcode,design,controversial,naming,codesize || true

      - name: Run ESLint Security Rules
        run: "npx eslint resources/js --ext .js,.vue,.ts --config=eslint.config.js --rule 'security/detect-object-injection: error' || true"

      - name: Run Stylelint Security Rules
        run: npx stylelint "resources/**/*.{css,scss,vue}" --config=.stylelintrc.json || true

      - name: Run Prettier Security Check
        run: npx prettier --check "resources/**/*.{js,css,scss,vue}" || true

      - name: Run Laravel Pint Security Check
        run: vendor/bin/pint --test --configuration=pint.json || true

      - name: Run Deptrac Security Analysis
        run: vendor/bin/deptrac analyse --config-file=deptrac.yaml || true

      - name: Run Infection Security Testing
        run: vendor/bin/infection --configuration=infection.json.dist --min-msi=80 --min-covered-msi=80 || true

      - name: Run Gitleaks (Secrets Scan)
        run: sudo docker run --rm -v "${{ github.workspace }}:/repo" zricethezav/gitleaks:latest detect -s /repo --no-git -f json -r /repo/gitleaks-report.json

      - name: Run Enlightn Security Checker
        continue-on-error: true
        run: ./vendor/bin/security-checker security:check --format=json > security-checker-report.json

      - name: Evaluate Enlightn Results
        id: enlightn_evaluate
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let count = 0;
            let errorMsg = null;
            try {
              const raw = fs.readFileSync('security-checker-report.json', 'utf8');
              const data = JSON.parse(raw);
              if (Array.isArray(data)) {
                count = 0;
              } else if (data && typeof data === 'object') {
                if (data.error) {
                  errorMsg = data.error;
                } else {
                  count = Object.keys(data).length;
                }
              }
            } catch (e) {
              errorMsg = e.message;
            }
            core.setOutput('vuln_packages', String(count));
            if (errorMsg) {
              core.warning(`Enlightn checker error: ${errorMsg}`);
            }
            if (count > 0) {
              core.setFailed(`Enlightn: found ${count} vulnerable package(s).`);
            }

      - name: Comment on Pull Request (Enlightn)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'security-checker-report.json';
            const header = '🛡️ Enlightn Security Checker Results';
            let body;
            try {
              const raw = fs.readFileSync(path, 'utf8');
              const data = JSON.parse(raw);
              if (Array.isArray(data)) {
                body = `${header}\n\n✅ لا توجد ثغرات أمنية.`;
              } else if (data && data.error) {
                body = `${header}\n\n⚠️ حدث خطأ أثناء التشغيل: ${data.error}`;
              } else {
                const entries = Object.entries(data);
                const count = entries.length;
                if (count === 0) {
                  body = `${header}\n\n✅ لا توجد ثغرات أمنية.`;
                } else {
                  const list = entries.slice(0, 10).map(([pkg, info]) => {
                    const advs = Array.isArray(info.advisories) ? info.advisories : [];
                    const first = advs[0]?.title ? ` — ${advs[0].title}` : '';
                    return `- ${pkg} (${advs.length} advisories)${first}`;
                  }).join('\n');
                  body = `${header}\n\n❌ تم العثور على ${count} حزمة (packages) تحتوي على ثغرات:\n${list}\n\nراجع الملف المرفق \`security-checker-report.json\` للتفاصيل الكاملة.`;
                }
              }
            } catch (e) {
              body = `${header}\n\n⚠️ تعذر قراءة التقرير: ${e.message}`;
            }
            const marker = '<!-- enlightn-security-checker -->';
            const fullBody = `${marker}\n${body}`;
            const {owner, repo} = context.repo;
            const issue_number = context.payload.pull_request.number;
            const { data: comments } = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = comments.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body: fullBody});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body: fullBody});
            }

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            composer-security-report.json
            npm-security-report.json
            gitleaks-report.json
            security-checker-report.json
          retention-days: 7
