name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"
          tools: composer:v2, cs2pr
          coverage: xdebug
          extensions: pdo_mysql, pdo_sqlite, sqlite3, mbstring, intl, gd
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: "stable"
      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-
      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
          npm ci
      - name: Create Laravel storage directories
        run: |
          mkdir -p storage/framework/{sessions,views,cache,testing}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          chmod -R 775 storage bootstrap/cache
      - name: Optimize Composer autoload
        run: composer dump-autoload --optimize --classmap-authoritative
      - name: Remove Rector to avoid php-parser conflict
        run: rm -rf vendor/rector || true
      - name: Validate composer
        run: composer validate --strict
      - name: Validate Nginx configuration
        run: docker run --rm -v "${{ github.workspace }}/docker/nginx.conf:/etc/nginx/nginx.conf:ro" nginx:stable nginx -t -c /etc/nginx/nginx.conf
      - name: Security audits
        run: |
          composer audit --no-interaction || true
          npm audit --audit-level=high || true
      - name: Static analysis
        run: |
          vendor/bin/phpstan analyse --no-progress
          vendor/bin/psalm --no-cache
      - name: Insights
        run: vendor/bin/phpinsights analyse app --no-interaction || true
      - name: Prepare env
        run: |
          if [ -f .env.testing ]; then cp .env.testing .env; else cp .env.example .env; fi
          php artisan key:generate
          sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env || echo "DB_CONNECTION=mysql" >> .env
          sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env || echo "DB_HOST=127.0.0.1" >> .env
          sed -i 's/^DB_PORT=.*/DB_PORT=3306/' .env || echo "DB_PORT=3306" >> .env
          sed -i 's/^DB_DATABASE=.*/DB_DATABASE=laravel/' .env || echo "DB_DATABASE=laravel" >> .env
          sed -i 's/^DB_USERNAME=.*/DB_USERNAME=laravel/' .env || echo "DB_USERNAME=laravel" >> .env
          sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=secret/' .env || echo "DB_PASSWORD=secret" >> .env
      - name: Clear Laravel config
        run: php artisan config:clear || true
       - name: Cache Laravel config
         run: php artisan config:cache || true
      - name: Show PHP extensions (pdo/mysql/sqlite)
        run: |
          php -m | sort | grep -E 'pdo|mysql|sqlite' || true
          php -r "echo extension_loaded('pdo_mysql') ? 'pdo_mysql loaded' : 'pdo_mysql missing'; echo PHP_EOL;"
          php -r "echo extension_loaded('pdo_sqlite') ? 'pdo_sqlite loaded' : 'pdo_sqlite missing'; echo PHP_EOL;"
          php --ri pdo_mysql || true
          php --ri pdo_sqlite || true
          php -r "echo 'Loaded extensions: ' . implode(', ', get_loaded_extensions()) . PHP_EOL;"
      - name: Ensure reports directory
        run: mkdir -p reports
      - name: Export PHP and MySQL info to reports
        run: |
          php -i > reports/php-info.txt
          php --ini > reports/php-ini.txt
          mysql -h 127.0.0.1 -uroot -proot -e "SHOW VARIABLES" > reports/mysql-variables.txt || true
      - name: Check storage writability
        run: |
          for d in storage storage/logs storage/framework storage/framework/sessions storage/framework/views storage/framework/cache bootstrap/cache; do
            if [ -w "$d" ]; then echo "$d writable"; else echo "$d NOT writable"; fi;
          done
      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client
      - name: Wait for MySQL and create DB
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h 127.0.0.1 --password=root --user=root --silent; then
              echo "MySQL is up"; break;
            fi
            echo "Waiting for MySQL..."; sleep 2;
          done
          # Additional readiness check
          mysql -h 127.0.0.1 -uroot -proot -e "SELECT 1;" || (echo "MySQL not ready yet" && exit 1)
          mysql -h 127.0.0.1 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS laravel;"
          mysql -h 127.0.0.1 -uroot -proot -e "GRANT ALL PRIVILEGES ON laravel.* TO 'laravel'@'%' IDENTIFIED BY 'secret'; FLUSH PRIVILEGES;"
          mysql -h 127.0.0.1 -uroot -proot -e "GRANT ALL PRIVILEGES ON laravel.* TO 'laravel'@'localhost' IDENTIFIED BY 'secret'; FLUSH PRIVILEGES;"
          mysql -h 127.0.0.1 -uroot -proot -e "GRANT ALL PRIVILEGES ON laravel.* TO 'laravel'@'127.0.0.1' IDENTIFIED BY 'secret'; FLUSH PRIVILEGES;"
          mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'laravel'@'%' IDENTIFIED WITH mysql_native_password BY 'secret';"
          mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'laravel'@'localhost' IDENTIFIED WITH mysql_native_password BY 'secret';"
          mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'laravel'@'127.0.0.1' IDENTIFIED WITH mysql_native_password BY 'secret';"
          mysql -h 127.0.0.1 -uroot -proot -e "ALTER DATABASE laravel CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
      - name: MySQL server version
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT VERSION();"
      - name: MySQL auth plugin for laravel user
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT user,host,plugin FROM mysql.user WHERE user='laravel';"
      - name: MySQL grants for laravel user
        run: mysql -h 127.0.0.1 -uroot -proot -e "SHOW GRANTS FOR 'laravel'@'%'; SHOW GRANTS FOR 'laravel'@'localhost'; SHOW GRANTS FOR 'laravel'@'127.0.0.1';"
      - name: MySQL sql_mode
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT @@sql_mode;"
      - name: MySQL charset and collation
        run: mysql -h 127.0.0.1 -uroot -proot -e "SHOW VARIABLES LIKE 'character_set_server'; SHOW VARIABLES LIKE 'collation_server'; SHOW VARIABLES LIKE 'lower_case_table_names';"
      - name: MySQL time zone info
        run: |
          mysql -h 127.0.0.1 -uroot -proot -e "SELECT @@system_time_zone AS system_tz, @@time_zone AS session_tz, NOW() AS now_local, UTC_TIMESTAMP() AS now_utc;"
          php -r "echo 'PHP timezone: ' . date_default_timezone_get() . PHP_EOL;"
      - name: MySQL storage engine and constraints
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT @@default_storage_engine AS default_engine, @@innodb_strict_mode AS innodb_strict_mode, @@sql_require_primary_key AS require_pk, @@foreign_key_checks AS fk_checks;"
      - name: MySQL laravel schema settings
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT schema_name, default_character_set_name, default_collation_name FROM information_schema.SCHEMATA WHERE schema_name='laravel';"
      - name: Verify laravel user session
        run: mysql -h 127.0.0.1 -ularavel -psecret -e "SELECT CURRENT_USER() AS current_user, @@sql_mode AS sql_mode;"
      - name: Verify PDO MySQL connectivity
        run: php -r "\n$env = parse_ini_file('.env');\n$dsn = 'mysql:host=' . ($env['DB_HOST'] ?? '127.0.0.1') . ';port=' . ($env['DB_PORT'] ?? '3306') . ';dbname=' . ($env['DB_DATABASE'] ?? 'laravel') . ';charset=utf8mb4';\ntry {\n  $pdo = new PDO($dsn, $env['DB_USERNAME'] ?? 'laravel', $env['DB_PASSWORD'] ?? 'secret');\n  echo 'PDO MySQL connection OK\\n';\n} catch (Throwable $e) {\n  fwrite(STDERR, 'PDO connection failed: ' . $e->getMessage() . \"\\n\");\n  exit(2);\n}\n"
      - name: Show Laravel config values (timezone/database)
        run: |
          php -r "require __DIR__ . '/vendor/autoload.php'; $app = require __DIR__ . '/bootstrap/app.php'; $app->make('Illuminate\\Contracts\\Console\\Kernel')->bootstrap(); echo 'App timezone: ' . config('app.timezone') . PHP_EOL; echo 'DB default: ' . config('database.default') . PHP_EOL; $def = config('database.default'); $cfg = config('database.connections.' . $def); if ($cfg) { echo 'DB host: ' . ($cfg['host'] ?? '') . PHP_EOL; echo 'DB port: ' . ($cfg['port'] ?? '') . PHP_EOL; echo 'DB database: ' . ($cfg['database'] ?? '') . PHP_EOL; echo 'DB username: ' . ($cfg['username'] ?? '') . PHP_EOL; echo 'Charset: ' . ($cfg['charset'] ?? '') . PHP_EOL; echo 'Collation: ' . ($cfg['collation'] ?? '') . PHP_EOL; }"
       - name: Show Laravel app/env/log/cache/session/queue/filesystem settings
         run: |
           php -r "require __DIR__ . '/vendor/autoload.php'; $app = require __DIR__ . '/bootstrap/app.php'; $app->make('Illuminate\\Contracts\\Console\\Kernel')->bootstrap(); $logDefault = config('logging.default'); $logLevel = config('logging.channels.' . $logDefault . '.level', ''); echo 'App env: ' . config('app.env') . PHP_EOL; echo 'App debug: ' . (config('app.debug') ? 'true' : 'false') . PHP_EOL; echo 'Log channel: ' . $logDefault . PHP_EOL; echo 'Log level: ' . $logLevel . PHP_EOL; echo 'Cache driver: ' . config('cache.default') . PHP_EOL; echo 'Session driver: ' . config('session.driver') . PHP_EOL; echo 'Queue connection: ' . config('queue.default') . PHP_EOL; echo 'Filesystem default: ' . config('filesystems.default', '') . PHP_EOL;"
       - name: Export sanitized env to reports
         run: |
           cp .env reports/env-sanitized.txt || true
           sed -i -E "s/(DB_PASSWORD=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(APP_KEY=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(MAIL_PASSWORD=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(REDIS_PASSWORD=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(AWS_SECRET_ACCESS_KEY=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(AWS_ACCESS_KEY_ID=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(PAYPAL_SECRET=).*/\1*****_/" reports/env-sanitized.txt || true
       - name: Export Laravel about report
         run: php artisan about > reports/laravel-about.txt || true
       - name: Verify Laravel DB facade connectivity
         run: |
           php -r "require __DIR__ . '/vendor/autoload.php'; $app = require __DIR__ . '/bootstrap/app.php'; $app->make('Illuminate\\Contracts\\Console\\Kernel')->bootstrap(); try { $v = Illuminate\\Support\\Facades\\DB::select('SELECT VERSION() AS v'); echo 'Laravel DB facade OK, version: ' . (($v && isset($v[0]) && (is_array($v[0]) ? ($v[0]['v'] ?? '') : ($v[0]->v ?? ''))) ) . PHP_EOL; } catch (Throwable $e) { fwrite(STDERR, 'Laravel DB facade failed: ' . $e->getMessage() . PHP_EOL); exit(3);}"
      - name: Show DB env vars
        run: |
          grep -E '^(DB_CONNECTION|DB_HOST|DB_PORT|DB_DATABASE|DB_USERNAME|DB_PASSWORD)=' .env || true
+      - name: Generate migration SQL (pretend)
+        run: |
+          php artisan migrate --database=mysql --pretend -vvv > reports/migrate-pretend.txt || true
       - name: Verify laravel user privileges (create/drop table)
         run: |
           mysql -h 127.0.0.1 -ularavel -psecret -e "USE laravel; CREATE TABLE IF NOT EXISTS tmp_ci_privs (id INT PRIMARY KEY) ENGINE=InnoDB; DROP TABLE tmp_ci_privs;"
       - name: Run migrations
         run: |
           php artisan migrate --database=mysql --no-interaction --force -vvv || (
             echo "Migrations failed; printing laravel.log and attempting migrate:fresh" ;
             test -f storage/logs/laravel.log && tail -n 500 storage/logs/laravel.log || echo "No laravel.log found" ;
             php artisan migrate:fresh --database=mysql --no-interaction --force -vvv || (
               echo "migrate:fresh also failed; printing laravel.log again" ;
               test -f storage/logs/laravel.log && tail -n 500 storage/logs/laravel.log || echo "No laravel.log found" ;
               exit 1
             )
           )
       - name: Migrations status
          run: php artisan migrate:status --database=mysql | tee reports/migrate-status.txt || true
      - name: Export MySQL engines
        run: |
          mysql -h 127.0.0.1 -uroot -proot -e "SHOW ENGINES;" > reports/mysql-engines.txt || true
      - name: Export MySQL variables summary
        run: |
          mysql -h 127.0.0.1 -uroot -proot -e "SELECT @@version AS version, @@version_comment AS version_comment, @@character_set_server AS charset_server, @@collation_server AS collation_server, @@character_set_database AS charset_db, @@collation_database AS collation_db, @@time_zone AS time_zone, @@transaction_isolation AS trx_isolation, @@sql_mode AS sql_mode, @@lower_case_table_names AS lower_case_table_names, @@innodb_strict_mode AS innodb_strict_mode, @@explicit_defaults_for_timestamp AS explicit_defaults_for_timestamp, @@sql_require_primary_key AS sql_require_primary_key, @@max_allowed_packet AS max_allowed_packet, @@foreign_key_checks AS foreign_key_checks;" > reports/mysql-variables-summary.txt || true
      - name: Export MySQL status summary
        run: |
          mysql -h 127.0.0.1 -uroot -proot -e "SHOW GLOBAL STATUS LIKE 'Threads_running'; SHOW GLOBAL STATUS LIKE 'Threads_connected'; SHOW GLOBAL STATUS LIKE 'Uptime';" > reports/mysql-status-summary.txt || true
      - name: Export Composer packages
        run: |
          composer show -D > reports/composer-packages.txt || true
+      - name: Export migrations table content
+        run: |
+          mysql -h 127.0.0.1 -ularavel -psecret -e "SELECT * FROM laravel.migrations ORDER BY batch, id;" > reports/mysql-migrations-table.txt || true
+      - name: Export MySQL schema tables (engine/collation/rows)
+        run: |
+          mysql -h 127.0.0.1 -ularavel -psecret -e "SELECT TABLE_NAME, ENGINE, TABLE_COLLATION, TABLE_ROWS FROM information_schema.TABLES WHERE TABLE_SCHEMA='laravel' ORDER BY TABLE_NAME;" > reports/mysql-laravel-tables.txt || true
+      - name: Export MySQL schema foreign keys
+        run: |
+          mysql -h 127.0.0.1 -ularavel -psecret -e "SELECT kcu.CONSTRAINT_NAME, kcu.TABLE_NAME, kcu.COLUMN_NAME, kcu.REFERENCED_TABLE_NAME, kcu.REFERENCED_COLUMN_NAME FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE kcu ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME AND tc.TABLE_SCHEMA = kcu.TABLE_SCHEMA WHERE tc.CONSTRAINT_TYPE='FOREIGN KEY' AND tc.TABLE_SCHEMA='laravel' ORDER BY kcu.TABLE_NAME, kcu.CONSTRAINT_NAME, kcu.ORDINAL_POSITION;" > reports/mysql-laravel-fks.txt || true
+      - name: Export MySQL schema indexes
+        run: |
+          mysql -h 127.0.0.1 -ularavel -psecret -e "SELECT TABLE_NAME, INDEX_NAME, NON_UNIQUE, SEQ_IN_INDEX, COLUMN_NAME FROM information_schema.STATISTICS WHERE TABLE_SCHEMA='laravel' ORDER BY TABLE_NAME, INDEX_NAME, SEQ_IN_INDEX;" > reports/mysql-laravel-indexes.txt || true
+      - name: Export InnoDB status
+        run: |
+          mysql -h 127.0.0.1 -uroot -proot -e "SHOW ENGINE INNODB STATUS" > reports/mysql-innodb-status.txt || true
+      - name: Export referential constraints rules
+        run: |
+          mysql -h 127.0.0.1 -ularavel -psecret -e "SELECT CONSTRAINT_NAME, TABLE_NAME, REFERENCED_TABLE_NAME, UPDATE_RULE, DELETE_RULE FROM information_schema.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_SCHEMA='laravel' ORDER BY TABLE_NAME, CONSTRAINT_NAME;" > reports/mysql-laravel-refs.txt || true
+      - name: Export MySQL plugins
+        run: |
+          mysql -h 127.0.0.1 -uroot -proot -e "SHOW PLUGINS;" > reports/mysql-plugins.txt || true
+      - name: Export MySQL processlist
+        run: |
+          mysql -h 127.0.0.1 -uroot -proot -e "SHOW FULL PROCESSLIST;" > reports/mysql-processlist.txt || true
+      - name: Export InnoDB transactions and locks
+        run: |
+          mysql -h 127.0.0.1 -uroot -proot -e "SELECT * FROM information_schema.INNODB_TRX;" > reports/mysql-innodb-trx.txt || true
+          mysql -h 127.0.0.1 -uroot -proot -e "SELECT * FROM information_schema.INNODB_LOCKS;" > reports/mysql-innodb-locks.txt || true
+          mysql -h 127.0.0.1 -uroot -proot -e "SELECT * FROM information_schema.INNODB_LOCK_WAITS;" > reports/mysql-innodb-lock-waits.txt || true
+      - name: Dump MySQL schema (no data)
+        run: |
+          mysqldump -h 127.0.0.1 -ularavel -psecret --no-data --routines --events --triggers --single-transaction --set-gtid-purged=OFF laravel > reports/mysql-schema-dump.sql || true
+      - name: Export SHOW CREATE TABLE for all laravel tables
+        shell: bash
+        run: |
+          set -euo pipefail
+          : > reports/mysql-show-create-tables.sql
+          for t in $(mysql -h 127.0.0.1 -ularavel -psecret -D laravel -N -e "SHOW TABLES" || true); do
+            echo "-- Table: $t" >> reports/mysql-show-create-tables.sql
+            mysql -h 127.0.0.1 -ularavel -psecret -D laravel -e "SHOW CREATE TABLE \`$t\`;" >> reports/mysql-show-create-tables.sql || true
+            echo >> reports/mysql-show-create-tables.sql
+          done
      - name: Analyze FK index gaps (prefix index missing)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p reports
          : > reports/mysql-fk-index-gaps.txt
          if [ -f reports/mysql-laravel-indexes.txt ] && [ -f reports/mysql-laravel-fks.txt ]; then
            awk -F '\t' '
              FILENAME ~ /mysql-laravel-indexes.txt$/ {
                if (FNR==1) next; # skip header
                key = $1 "|" $2; # table|index
                cols[key] = (cols[key] ? cols[key] "," $5 : $5);
                next;
              }
              FILENAME ~ /mysql-laravel-fks.txt$/ {
                if (FNR==1) next;
                fkkey = $2 "|" $1; # table|constraint
                fkcols[fkkey] = (fkcols[fkkey] ? fkcols[fkkey] "," $3 : $3);
              }
              END {
                # materialize idx map
                for (k in cols) {
                  split(k, a, "|");
                  t = a[1]; idx = a[2];
                  idx_list[t] = (idx_list[t] ? idx_list[t] "\n" cols[k] : cols[k]);
                }
                # check each fk against table indexes
                for (fk in fkcols) {
                  split(fk, b, "|");
                  t = b[1]; c = b[2];
                  f = fkcols[fk];
                  found = 0;
                  n = split(idx_list[t], arr, "\n");
                  for (i=1; i<=n; i++) {
                    idxc = arr[i];
                    if (idxc == f) { found = 1; break; }
                    if (length(idxc) > length(f) && substr(idxc,1,length(f)) == f && substr(idxc,length(f)+1,1) == ",") { found = 1; break; }
                  }
                  if (!found) {
                    printf("%s\t%s\t%s\n", t, c, f);
                  }
                }
              }
            ' reports/mysql-laravel-indexes.txt reports/mysql-laravel-fks.txt > reports/mysql-fk-index-gaps.txt || true
          fi
      - name: Detect FK type/collation/charset mismatches
        run: |
          mysql -h 127.0.0.1 -ularavel -psecret -e "\
            SELECT \
              kcu.CONSTRAINT_NAME, \
              kcu.TABLE_NAME, \
              kcu.COLUMN_NAME, \
              kcu.REFERENCED_TABLE_NAME, \
              kcu.REFERENCED_COLUMN_NAME, \
              child.DATA_TYPE AS child_type, \
              parent.DATA_TYPE AS parent_type, \
              child.CHARACTER_SET_NAME AS child_charset, \
              parent.CHARACTER_SET_NAME AS parent_charset, \
              child.COLLATION_NAME AS child_collation, \
              parent.COLLATION_NAME AS parent_collation \
            FROM information_schema.KEY_COLUMN_USAGE kcu \
            JOIN information_schema.COLUMNS child \
              ON child.TABLE_SCHEMA=kcu.TABLE_SCHEMA \
              AND child.TABLE_NAME=kcu.TABLE_NAME \
              AND child.COLUMN_NAME=kcu.COLUMN_NAME \
            JOIN information_schema.COLUMNS parent \
              ON parent.TABLE_SCHEMA=kcu.REFERENCED_TABLE_SCHEMA \
              AND parent.TABLE_NAME=kcu.REFERENCED_TABLE_NAME \
              AND parent.COLUMN_NAME=kcu.REFERENCED_COLUMN_NAME \
            WHERE kcu.TABLE_SCHEMA='laravel' \
              AND kcu.REFERENCED_TABLE_SCHEMA IS NOT NULL \
              AND ( \
                child.DATA_TYPE <> parent.DATA_TYPE \
                OR COALESCE(child.CHARACTER_SET_NAME,'') <> COALESCE(parent.CHARACTER_SET_NAME,'') \
                OR COALESCE(child.COLLATION_NAME,'') <> COALESCE(parent.COLLATION_NAME,'') \
              ) \
            ORDER BY kcu.TABLE_NAME, kcu.CONSTRAINT_NAME, kcu.ORDINAL_POSITION;\
          " > reports/mysql-fk-type-mismatches.txt || true
      - name: Summarize MySQL/Laravel diagnostics
        shell: bash
        run: |
          set -euo pipefail
          OUT="reports/diagnostics-summary.md"
          ALERTS="reports/diagnostics-alerts.md"
          mkdir -p reports
          : > "$ALERTS"
          {
            if [ -f reports/mysql-variables-summary.txt ]; then
              sql_mode=$(awk -F'\t' '/sql_mode/ {print $2}' reports/mysql-variables-summary.txt | head -n1)
              if echo "$sql_mode" | grep -q "ONLY_FULL_GROUP_BY"; then
                echo "⚠️ SQL_MODE includes ONLY_FULL_GROUP_BY — may break legacy queries"
              fi
              if echo "$sql_mode" | grep -q "NO_ZERO_DATE\|NO_ZERO_IN_DATE"; then
                echo "⚠️ SQL_MODE includes NO_ZERO_DATE/NO_ZERO_IN_DATE — strict date checks"
              fi
              if echo "$sql_mode" | grep -q "STRICT_TRANS_TABLES\|STRICT_ALL_TABLES"; then
                echo "ℹ️ SQL_MODE is strict — ensure migrations/data comply"
              fi
            fi
            if [ -f reports/mysql-engines.txt ]; then
              if grep -q "MyISAM" reports/mysql-engines.txt; then
                echo "❗ Found MyISAM tables — convert to InnoDB to support FKs"
              fi
            fi
            if [ -f reports/mysql-show-create-tables.sql ]; then
              no_pk_cnt=$(awk '/CREATE TABLE/ {flag=1} flag && /PRIMARY KEY/ {pk=1} /\);/ {if(!pk){print}; flag=pk=0}' reports/mysql-show-create-tables.sql | wc -l)
              if [ "$no_pk_cnt" -gt 0 ]; then
                echo "❗ Tables without PRIMARY KEY detected — add PKs (count: $no_pk_cnt)"
              fi
            fi
            if [ -f reports/mysql-laravel-columns.txt ] && [ -f reports/mysql-variables-summary.txt ]; then
              srv_coll=$(awk -F'\t' '/collation_server/ {print $2}' reports/mysql-variables-summary.txt | head -n1)
              db_coll=$(awk -F'\t' '/collation_db/ {print $2}' reports/mysql-variables-summary.txt | head -n1)
              mism_cnt=$(grep -vcE "$db_coll|$srv_coll" reports/mysql-laravel-columns.txt || true)
              if [ "$mism_cnt" -gt 0 ]; then
                echo "⚠️ Collation/charset mismatches across columns — count: $mism_cnt"
              fi
            fi
            if [ -f reports/migrate-status.txt ]; then
              if grep -qE "Pending|down|Not installed|missing" reports/migrate-status.txt; then
                echo "❗ Migrations not fully applied — check migrate:status"
              fi
            fi
            if [ -f reports/mysql-innodb-status.txt ]; then
              if grep -qE "LATEST DETECTED DEADLOCK|LATEST FOREIGN KEY ERROR" reports/mysql-innodb-status.txt; then
                echo "❗ InnoDB reported deadlocks or FK errors"
              fi
            fi
            if [ -s reports/mysql-fk-index-gaps.txt ]; then
              echo "❗ FK referencing columns lacking prefix index — count: $(wc -l < reports/mysql-fk-index-gaps.txt)"
            fi
            if [ -s reports/mysql-fk-type-mismatches.txt ]; then
              echo "❗ FK type/charset/collation mismatches — count: $(wc -l < reports/mysql-fk-type-mismatches.txt)"
            fi
          } >> "$ALERTS"
          {
            echo "# CI Diagnostics Summary"
            echo
            echo "## Alerts"
            if [ -s "$ALERTS" ]; then
              cat "$ALERTS"
            else
              echo "No alerts detected"
            fi
            echo
            echo "## Environment"
            if [ -f reports/mysql-variables-summary.txt ]; then
              grep -E "version|charset_server|collation_server|charset_db|collation_db|sql_mode" reports/mysql-variables-summary.txt || true
            fi
            echo
            echo "## Migration status"
            if [ -f reports/migrate-status.txt ]; then
              echo '```'
              sed -n '1,100p' reports/migrate-status.txt
              echo '```'
            fi
            echo
            echo "## InnoDB status (deadlocks/lock waits)"
            if [ -f reports/mysql-innodb-status.txt ]; then
              grep -nE "LATEST DETECTED DEADLOCK|LATEST FOREIGN KEY ERROR|TRANSACTIONS" reports/mysql-innodb-status.txt | sed -n '1,100p' || true
            fi
            echo
            echo "## Foreign keys and indexes"
            if [ -f reports/mysql-laravel-fks.txt ]; then
              echo "- FK count: $(wc -l < reports/mysql-laravel-fks.txt)"
            fi
            if [ -f reports/mysql-laravel-indexes.txt ]; then
              echo "- Index entries: $(wc -l < reports/mysql-laravel-indexes.txt)"
            fi
            echo
            echo "## Process/threads"
            if [ -f reports/mysql-status-summary.txt ]; then
              cat reports/mysql-status-summary.txt
            fi
            echo
            echo "## Collation/charset mismatches (columns)"
            if [ -f reports/mysql-laravel-columns.txt ] && [ -f reports/mysql-variables-summary.txt ]; then
              srv_coll=$(awk -F'\t' '/collation_server/ {print $2}' reports/mysql-variables-summary.txt | head -n1)
              db_coll=$(awk -F'\t' '/collation_db/ {print $2}' reports/mysql-variables-summary.txt | head -n1)
              echo "- Server collation: ${srv_coll}"
              echo "- Database collation: ${db_coll}"
              grep -vE "${db_coll}|${srv_coll}" reports/mysql-laravel-columns.txt | head -n 50 || true
            fi
          } > "$OUT"
          echo "Wrote summary to $OUT and alerts to $ALERTS"
      - name: Publish diagnostics to Job Summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if [ -f reports/diagnostics-summary.md ]; then
            echo "## Diagnostics Summary" >> "$GITHUB_STEP_SUMMARY"
            cat reports/diagnostics-summary.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No diagnostics summary generated" >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Annotate diagnostics alerts
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if [ -s reports/diagnostics-alerts.md ]; then
            while IFS= read -r line; do
              case "$line" in
                "❗ "*)
                  echo "::error title=MySQL/Laravel Diagnostics::${line#❗ }"
                  ;;
                "⚠️ "*)
                  echo "::warning title=MySQL/Laravel Diagnostics::${line#⚠️ }"
                  ;;
                "ℹ️ "*)
                  echo "::notice title=MySQL/Laravel Diagnostics::${line#ℹ️ }"
                  ;;
                *)
                  echo "::notice title=MySQL/Laravel Diagnostics::$line"
                  ;;
              esac
            done < reports/diagnostics-alerts.md
          fi
      - name: Fail on critical alerts (optional)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          FLAG="${FAIL_ON_CRITICAL_ALERTS:-false}"
          if [ "$FLAG" = "true" ] && [ -s reports/diagnostics-alerts.md ]; then
            if grep -q "^❗ " reports/diagnostics-alerts.md; then
              echo "Critical diagnostics found; failing as requested."
              exit 1
            fi
          fi
       - name: Capture MySQL service logs
         run: |
           CID=$(docker ps --format '{{.ID}} {{.Image}} {{.Names}}' | awk '/mysql:8/ {print $1; exit}')
           if [ -n "$CID" ]; then
             docker logs "$CID" > reports/mysql-service.log || true
           else
             echo "MySQL container not found" > reports/mysql-service.log
           fi
           test -f reports/mysql-service.log || touch reports/mysql-service.log
      - name: List MySQL databases and laravel tables
        run: |
          mysql -h 127.0.0.1 -ularavel -psecret -e "SHOW DATABASES;"
          mysql -h 127.0.0.1 -ularavel -psecret -e "SHOW TABLES FROM laravel;" || true
      - name: Run tests with coverage
        run: |
          vendor/bin/phpunit --log-junit reports/junit-ci.xml --coverage-clover reports/coverage-ci.xml --coverage-text || (
            echo "PHPUnit failed; printing laravel.log" ;
            test -f storage/logs/laravel.log && tail -n 500 storage/logs/laravel.log || echo "No laravel.log found" ;
            exit 1
          )
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-results
          path: reports/
          retention-days: 7
      - name: Upload MySQL service logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-mysql-service-logs
          path: reports/mysql-service.log
          retention-days: 7
      - name: Upload Laravel logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-laravel-logs
          path: storage/logs/
          retention-days: 7

  artifacts-consumer:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download CI test results artifact
        uses: actions/download-artifact@v4
        with:
          name: ci-test-results
          path: downloaded-ci-test-results
      - name: List downloaded files
        run: |
          ls -la downloaded-ci-test-results
          test -f downloaded-ci-test-results/junit-ci.xml && echo "Found junit-ci.xml" || echo "Missing junit-ci.xml"
          echo "\n== Diagnostics Summary =="
          test -f downloaded-ci-test-results/diagnostics-summary.md && sed -n '1,200p' downloaded-ci-test-results/diagnostics-summary.md || echo "No diagnostics-summary.md"
          echo "\n== Diagnostics Alerts =="
          test -f downloaded-ci-test-results/diagnostics-alerts.md && cat downloaded-ci-test-results/diagnostics-alerts.md || echo "No diagnostics-alerts.md"
          echo "\n== FK Index Gaps =="
          test -f downloaded-ci-test-results/mysql-fk-index-gaps.txt && sed -n '1,50p' downloaded-ci-test-results/mysql-fk-index-gaps.txt || echo "No mysql-fk-index-gaps.txt"
          echo "\n== FK Type/Charset/Collation Mismatches =="
          test -f downloaded-ci-test-results/mysql-fk-type-mismatches.txt && sed -n '1,50p' downloaded-ci-test-results/mysql-fk-type-mismatches.txt || echo "No mysql-fk-type-mismatches.txt"
