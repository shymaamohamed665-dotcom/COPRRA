name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"
          tools: composer:v2, cs2pr
          coverage: xdebug
          extensions: pdo_mysql, mbstring, intl, gd
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: "stable"
      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-
      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
          npm ci
      - name: Create Laravel storage directories
        run: |
          mkdir -p storage/framework/{sessions,views,cache,testing}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          chmod -R 775 storage bootstrap/cache
      - name: Optimize Composer autoload
        run: composer dump-autoload --optimize --classmap-authoritative
      - name: Remove Rector to avoid php-parser conflict
        run: rm -rf vendor/rector || true
      - name: Validate composer
        run: composer validate --strict
      - name: Validate Nginx configuration
        run: docker run --rm -v "${{ github.workspace }}/docker/nginx.conf:/etc/nginx/nginx.conf:ro" nginx:stable nginx -t -c /etc/nginx/nginx.conf
      - name: Security audits
        run: |
          composer audit --no-interaction || true
          npm audit --audit-level=high || true
      - name: Static analysis
        run: |
          vendor/bin/phpstan analyse --no-progress
          vendor/bin/psalm --no-cache
      - name: Insights
        run: vendor/bin/phpinsights analyse app --no-interaction || true
      - name: Prepare env
        run: |
          if [ -f .env.testing ]; then cp .env.testing .env; else cp .env.example .env; fi
          php artisan key:generate
          sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env || echo "DB_CONNECTION=mysql" >> .env
          sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env || echo "DB_HOST=127.0.0.1" >> .env
          sed -i 's/^DB_PORT=.*/DB_PORT=3306/' .env || echo "DB_PORT=3306" >> .env
          sed -i 's/^DB_DATABASE=.*/DB_DATABASE=laravel/' .env || echo "DB_DATABASE=laravel" >> .env
          sed -i 's/^DB_USERNAME=.*/DB_USERNAME=laravel/' .env || echo "DB_USERNAME=laravel" >> .env
          sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=secret/' .env || echo "DB_PASSWORD=secret" >> .env
      - name: Clear Laravel config
        run: php artisan config:clear || true
      - name: Show PHP extensions (pdo/mysql)
        run: |
          php -m | sort | grep -E 'pdo|mysql' || true
          php -r "echo extension_loaded('pdo_mysql') ? 'pdo_mysql loaded' : 'pdo_mysql missing'; echo PHP_EOL;"
          php -r "echo 'Loaded extensions: ' . implode(', ', get_loaded_extensions()) . PHP_EOL;"
      - name: Ensure reports directory
        run: mkdir -p reports
      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client
      - name: Wait for MySQL and create DB
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h 127.0.0.1 --password=root --user=root --silent; then
              echo "MySQL is up"; break;
            fi
            echo "Waiting for MySQL..."; sleep 2;
          done
          mysql -h 127.0.0.1 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS laravel;"
          mysql -h 127.0.0.1 -uroot -proot -e "GRANT ALL PRIVILEGES ON laravel.* TO 'laravel'@'%' IDENTIFIED BY 'secret'; FLUSH PRIVILEGES;"
      - name: MySQL server version
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT VERSION();"
      - name: Verify PDO MySQL connectivity
        run: php -r "\n$env = parse_ini_file('.env');\n$dsn = 'mysql:host=' . ($env['DB_HOST'] ?? '127.0.0.1') . ';port=' . ($env['DB_PORT'] ?? '3306') . ';dbname=' . ($env['DB_DATABASE'] ?? 'laravel');\ntry {\n  $pdo = new PDO($dsn, $env['DB_USERNAME'] ?? 'laravel', $env['DB_PASSWORD'] ?? 'secret');\n  echo 'PDO MySQL connection OK\\n';\n} catch (Throwable $e) {\n  fwrite(STDERR, 'PDO connection failed: ' . $e->getMessage() . "\\n");\n  exit(2);\n}\n"
      - name: Show DB env vars
        run: |
          grep -E '^(DB_CONNECTION|DB_HOST|DB_PORT|DB_DATABASE|DB_USERNAME|DB_PASSWORD)=' .env || true
      - name: Run migrations
        run: php artisan migrate --database=mysql --no-interaction --force -vvv
      - name: Migrations status
        run: php artisan migrate:status --database=mysql || true
      - name: List MySQL databases and laravel tables
        run: |
          mysql -h 127.0.0.1 -ularavel -psecret -e "SHOW DATABASES;"
          mysql -h 127.0.0.1 -ularavel -psecret -e "SHOW TABLES FROM laravel;" || true
      - name: Run tests with coverage
        run: vendor/bin/phpunit --log-junit reports/junit-ci.xml --coverage-clover reports/coverage-ci.xml --coverage-text
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-results
          path: reports/
          retention-days: 7

  artifacts-consumer:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download CI test results artifact
        uses: actions/download-artifact@v4
        with:
          name: ci-test-results
          path: downloaded-ci-test-results
      - name: List downloaded files
        run: |
          ls -la downloaded-ci-test-results
          test -f downloaded-ci-test-results/junit-ci.xml && echo "Found junit-ci.xml" || echo "Missing junit-ci.xml"
