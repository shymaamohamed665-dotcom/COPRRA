name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"
          tools: composer:v2, cs2pr
          coverage: xdebug
          extensions: pdo_mysql, pdo_sqlite, sqlite3, mbstring, intl, gd
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: "stable"
      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-
      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
          npm ci
      - name: Create Laravel storage directories
        run: |
          mkdir -p storage/framework/{sessions,views,cache,testing}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          chmod -R 775 storage bootstrap/cache
      - name: Optimize Composer autoload
        run: composer dump-autoload --optimize --classmap-authoritative
      - name: Remove Rector to avoid php-parser conflict
        run: rm -rf vendor/rector || true
      - name: Validate composer
        run: composer validate --strict
      - name: Validate Nginx configuration
        run: docker run --rm -v "${{ github.workspace }}/docker/nginx.conf:/etc/nginx/nginx.conf:ro" nginx:stable nginx -t -c /etc/nginx/nginx.conf
      - name: Security audits
        run: |
          composer audit --no-interaction || true
          npm audit --audit-level=high || true
      - name: Static analysis
        run: |
          vendor/bin/phpstan analyse --no-progress
          vendor/bin/psalm --no-cache
      - name: Insights
        run: vendor/bin/phpinsights analyse app --no-interaction || true
      - name: Prepare env
        run: |
          if [ -f .env.testing ]; then cp .env.testing .env; else cp .env.example .env; fi
          php artisan key:generate
          sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env || echo "DB_CONNECTION=mysql" >> .env
          sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env || echo "DB_HOST=127.0.0.1" >> .env
          sed -i 's/^DB_PORT=.*/DB_PORT=3306/' .env || echo "DB_PORT=3306" >> .env
          sed -i 's/^DB_DATABASE=.*/DB_DATABASE=laravel/' .env || echo "DB_DATABASE=laravel" >> .env
          sed -i 's/^DB_USERNAME=.*/DB_USERNAME=laravel/' .env || echo "DB_USERNAME=laravel" >> .env
          sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=secret/' .env || echo "DB_PASSWORD=secret" >> .env
      - name: Clear Laravel config
        run: php artisan config:clear || true
       - name: Cache Laravel config
         run: php artisan config:cache || true
      - name: Show PHP extensions (pdo/mysql/sqlite)
        run: |
          php -m | sort | grep -E 'pdo|mysql|sqlite' || true
          php -r "echo extension_loaded('pdo_mysql') ? 'pdo_mysql loaded' : 'pdo_mysql missing'; echo PHP_EOL;"
          php -r "echo extension_loaded('pdo_sqlite') ? 'pdo_sqlite loaded' : 'pdo_sqlite missing'; echo PHP_EOL;"
          php --ri pdo_mysql || true
          php --ri pdo_sqlite || true
          php -r "echo 'Loaded extensions: ' . implode(', ', get_loaded_extensions()) . PHP_EOL;"
      - name: Ensure reports directory
        run: mkdir -p reports
      - name: Export PHP and MySQL info to reports
        run: |
          php -i > reports/php-info.txt
          php --ini > reports/php-ini.txt
          mysql -h 127.0.0.1 -uroot -proot -e "SHOW VARIABLES" > reports/mysql-variables.txt || true
      - name: Check storage writability
        run: |
          for d in storage storage/logs storage/framework storage/framework/sessions storage/framework/views storage/framework/cache bootstrap/cache; do
            if [ -w "$d" ]; then echo "$d writable"; else echo "$d NOT writable"; fi;
          done
      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client
      - name: Wait for MySQL and create DB
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h 127.0.0.1 --password=root --user=root --silent; then
              echo "MySQL is up"; break;
            fi
            echo "Waiting for MySQL..."; sleep 2;
          done
          # Additional readiness check
          mysql -h 127.0.0.1 -uroot -proot -e "SELECT 1;" || (echo "MySQL not ready yet" && exit 1)
          mysql -h 127.0.0.1 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS laravel;"
          mysql -h 127.0.0.1 -uroot -proot -e "GRANT ALL PRIVILEGES ON laravel.* TO 'laravel'@'%' IDENTIFIED BY 'secret'; FLUSH PRIVILEGES;"
          mysql -h 127.0.0.1 -uroot -proot -e "GRANT ALL PRIVILEGES ON laravel.* TO 'laravel'@'localhost' IDENTIFIED BY 'secret'; FLUSH PRIVILEGES;"
          mysql -h 127.0.0.1 -uroot -proot -e "GRANT ALL PRIVILEGES ON laravel.* TO 'laravel'@'127.0.0.1' IDENTIFIED BY 'secret'; FLUSH PRIVILEGES;"
          mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'laravel'@'%' IDENTIFIED WITH mysql_native_password BY 'secret';"
          mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'laravel'@'localhost' IDENTIFIED WITH mysql_native_password BY 'secret';"
          mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'laravel'@'127.0.0.1' IDENTIFIED WITH mysql_native_password BY 'secret';"
          mysql -h 127.0.0.1 -uroot -proot -e "ALTER DATABASE laravel CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
      - name: MySQL server version
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT VERSION();"
      - name: MySQL auth plugin for laravel user
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT user,host,plugin FROM mysql.user WHERE user='laravel';"
      - name: MySQL grants for laravel user
        run: mysql -h 127.0.0.1 -uroot -proot -e "SHOW GRANTS FOR 'laravel'@'%'; SHOW GRANTS FOR 'laravel'@'localhost'; SHOW GRANTS FOR 'laravel'@'127.0.0.1';"
      - name: MySQL sql_mode
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT @@sql_mode;"
      - name: MySQL charset and collation
        run: mysql -h 127.0.0.1 -uroot -proot -e "SHOW VARIABLES LIKE 'character_set_server'; SHOW VARIABLES LIKE 'collation_server'; SHOW VARIABLES LIKE 'lower_case_table_names';"
      - name: MySQL time zone info
        run: |
          mysql -h 127.0.0.1 -uroot -proot -e "SELECT @@system_time_zone AS system_tz, @@time_zone AS session_tz, NOW() AS now_local, UTC_TIMESTAMP() AS now_utc;"
          php -r "echo 'PHP timezone: ' . date_default_timezone_get() . PHP_EOL;"
      - name: MySQL storage engine and constraints
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT @@default_storage_engine AS default_engine, @@innodb_strict_mode AS innodb_strict_mode, @@sql_require_primary_key AS require_pk, @@foreign_key_checks AS fk_checks;"
      - name: MySQL laravel schema settings
        run: mysql -h 127.0.0.1 -uroot -proot -e "SELECT schema_name, default_character_set_name, default_collation_name FROM information_schema.SCHEMATA WHERE schema_name='laravel';"
      - name: Verify laravel user session
        run: mysql -h 127.0.0.1 -ularavel -psecret -e "SELECT CURRENT_USER() AS current_user, @@sql_mode AS sql_mode;"
      - name: Verify PDO MySQL connectivity
        run: php -r "\n$env = parse_ini_file('.env');\n$dsn = 'mysql:host=' . ($env['DB_HOST'] ?? '127.0.0.1') . ';port=' . ($env['DB_PORT'] ?? '3306') . ';dbname=' . ($env['DB_DATABASE'] ?? 'laravel') . ';charset=utf8mb4';\ntry {\n  $pdo = new PDO($dsn, $env['DB_USERNAME'] ?? 'laravel', $env['DB_PASSWORD'] ?? 'secret');\n  echo 'PDO MySQL connection OK\\n';\n} catch (Throwable $e) {\n  fwrite(STDERR, 'PDO connection failed: ' . $e->getMessage() . \"\\n\");\n  exit(2);\n}\n"
      - name: Show Laravel config values (timezone/database)
        run: |
          php -r "require __DIR__ . '/vendor/autoload.php'; $app = require __DIR__ . '/bootstrap/app.php'; $app->make('Illuminate\\Contracts\\Console\\Kernel')->bootstrap(); echo 'App timezone: ' . config('app.timezone') . PHP_EOL; echo 'DB default: ' . config('database.default') . PHP_EOL; $def = config('database.default'); $cfg = config('database.connections.' . $def); if ($cfg) { echo 'DB host: ' . ($cfg['host'] ?? '') . PHP_EOL; echo 'DB port: ' . ($cfg['port'] ?? '') . PHP_EOL; echo 'DB database: ' . ($cfg['database'] ?? '') . PHP_EOL; echo 'DB username: ' . ($cfg['username'] ?? '') . PHP_EOL; echo 'Charset: ' . ($cfg['charset'] ?? '') . PHP_EOL; echo 'Collation: ' . ($cfg['collation'] ?? '') . PHP_EOL; }"
       - name: Show Laravel app/env/log/cache/session/queue/filesystem settings
         run: |
           php -r "require __DIR__ . '/vendor/autoload.php'; $app = require __DIR__ . '/bootstrap/app.php'; $app->make('Illuminate\\Contracts\\Console\\Kernel')->bootstrap(); $logDefault = config('logging.default'); $logLevel = config('logging.channels.' . $logDefault . '.level', ''); echo 'App env: ' . config('app.env') . PHP_EOL; echo 'App debug: ' . (config('app.debug') ? 'true' : 'false') . PHP_EOL; echo 'Log channel: ' . $logDefault . PHP_EOL; echo 'Log level: ' . $logLevel . PHP_EOL; echo 'Cache driver: ' . config('cache.default') . PHP_EOL; echo 'Session driver: ' . config('session.driver') . PHP_EOL; echo 'Queue connection: ' . config('queue.default') . PHP_EOL; echo 'Filesystem default: ' . config('filesystems.default', '') . PHP_EOL;"
       - name: Export sanitized env to reports
         run: |
           cp .env reports/env-sanitized.txt || true
           sed -i -E "s/(DB_PASSWORD=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(APP_KEY=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(MAIL_PASSWORD=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(REDIS_PASSWORD=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(AWS_SECRET_ACCESS_KEY=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(AWS_ACCESS_KEY_ID=).*/\1*****_/" reports/env-sanitized.txt || true
           sed -i -E "s/(PAYPAL_SECRET=).*/\1*****_/" reports/env-sanitized.txt || true
       - name: Export Laravel about report
         run: php artisan about > reports/laravel-about.txt || true
       - name: Verify Laravel DB facade connectivity
         run: |
           php -r "require __DIR__ . '/vendor/autoload.php'; $app = require __DIR__ . '/bootstrap/app.php'; $app->make('Illuminate\\Contracts\\Console\\Kernel')->bootstrap(); try { $v = Illuminate\\Support\\Facades\\DB::select('SELECT VERSION() AS v'); echo 'Laravel DB facade OK, version: ' . (($v && isset($v[0]) && (is_array($v[0]) ? ($v[0]['v'] ?? '') : ($v[0]->v ?? ''))) ) . PHP_EOL; } catch (Throwable $e) { fwrite(STDERR, 'Laravel DB facade failed: ' . $e->getMessage() . PHP_EOL); exit(3);}"
      - name: Show DB env vars
        run: |
          grep -E '^(DB_CONNECTION|DB_HOST|DB_PORT|DB_DATABASE|DB_USERNAME|DB_PASSWORD)=' .env || true
      - name: Verify laravel user privileges (create/drop table)
        run: |
          mysql -h 127.0.0.1 -ularavel -psecret -e "USE laravel; CREATE TABLE IF NOT EXISTS tmp_ci_privs (id INT PRIMARY KEY) ENGINE=InnoDB; DROP TABLE tmp_ci_privs;"
      - name: Run migrations
        run: |
          php artisan migrate --database=mysql --no-interaction --force -vvv || (
            echo "Migrations failed; printing laravel.log and attempting migrate:fresh" ;
            test -f storage/logs/laravel.log && tail -n 500 storage/logs/laravel.log || echo "No laravel.log found" ;
            php artisan migrate:fresh --database=mysql --no-interaction --force -vvv || (
              echo "migrate:fresh also failed; printing laravel.log again" ;
              test -f storage/logs/laravel.log && tail -n 500 storage/logs/laravel.log || echo "No laravel.log found" ;
              exit 1
            )
          )
      - name: Migrations status
        run: php artisan migrate:status --database=mysql || true
      - name: Capture MySQL service logs
        run: |
          CID=$(docker ps --format '{{.ID}} {{.Image}} {{.Names}}' | awk '/mysql:8/ {print $1; exit}')
          if [ -n "$CID" ]; then
            docker logs "$CID" > reports/mysql-service.log || true
          else
            echo "MySQL container not found" > reports/mysql-service.log
          fi
          test -f reports/mysql-service.log || touch reports/mysql-service.log
      - name: List MySQL databases and laravel tables
        run: |
          mysql -h 127.0.0.1 -ularavel -psecret -e "SHOW DATABASES;"
          mysql -h 127.0.0.1 -ularavel -psecret -e "SHOW TABLES FROM laravel;" || true
      - name: Run tests with coverage
        run: |
          vendor/bin/phpunit --log-junit reports/junit-ci.xml --coverage-clover reports/coverage-ci.xml --coverage-text || (
            echo "PHPUnit failed; printing laravel.log" ;
            test -f storage/logs/laravel.log && tail -n 500 storage/logs/laravel.log || echo "No laravel.log found" ;
            exit 1
          )
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-results
          path: reports/
          retention-days: 7
      - name: Upload MySQL service logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-mysql-service-logs
          path: reports/mysql-service.log
          retention-days: 7
      - name: Upload Laravel logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-laravel-logs
          path: storage/logs/
          retention-days: 7

  artifacts-consumer:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download CI test results artifact
        uses: actions/download-artifact@v4
        with:
          name: ci-test-results
          path: downloaded-ci-test-results
      - name: List downloaded files
        run: |
          ls -la downloaded-ci-test-results
          test -f downloaded-ci-test-results/junit-ci.xml && echo "Found junit-ci.xml" || echo "Missing junit-ci.xml"
