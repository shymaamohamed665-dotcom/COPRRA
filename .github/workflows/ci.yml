name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer:v2, cs2pr
          coverage: xdebug
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 'stable'
      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-
      - name: Prepare Laravel directories
        run: |
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          chmod -R 777 storage bootstrap/cache
      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
          npm ci
      - name: Validate composer
        run: composer validate --strict
      - name: Security audits
        run: |
          composer audit --no-interaction || true
          npm audit --audit-level=high || true
      - name: Setup Laravel
        run: |
          cp .env.example .env
          php artisan key:generate
        env:
          APP_ENV: testing
      - name: Static analysis
        run: |
          vendor/bin/phpstan analyse --no-progress
          vendor/bin/psalm --no-cache
      - name: Insights
        run: vendor/bin/phpinsights analyse app --no-interaction || true
      - name: Ensure reports directory
        run: mkdir -p reports
      - name: Run tests with coverage
        run: vendor/bin/phpunit --log-junit reports/junit-ci.xml --coverage-clover reports/coverage-ci.xml --coverage-text
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-results
          path: reports/
          retention-days: 7

  artifacts-consumer:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download CI test results artifact
        uses: actions/download-artifact@v4
        with:
          name: ci-test-results
          path: downloaded-ci-test-results
      - name: List downloaded files
        run: |
          ls -la downloaded-ci-test-results
          test -f downloaded-ci-test-results/junit-ci.xml && echo "Found junit-ci.xml" || echo "Missing junit-ci.xml"
