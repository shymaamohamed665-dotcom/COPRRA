name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop, 'feature/**', 'fix/**' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PHP_VERSION: '8.4'
  NODE_VERSION: '20'

jobs:
  #=============================================================================
  # JOB 1: CODE VALIDATION
  #=============================================================================
  code-validation:
    name: Code Validation & Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, json, bcmath, zip, pdo_mysql, redis
          coverage: none
          tools: composer:v2

      - name: Validate composer.json
        run: composer validate --strict

      - name: Create Laravel storage directories
        run: |
          mkdir -p storage/framework/{sessions,views,cache,testing}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          mkdir -p resources/svg/heroicons
          chmod -R 775 storage bootstrap/cache

      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install NPM dependencies
        run: npm ci

      - name: Run NPM audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Composer audit
        run: composer audit
        continue-on-error: true

  #=============================================================================
  # JOB 2: STATIC ANALYSIS
  #=============================================================================
  static-analysis:
    name: Static Analysis (PHPStan & Pint)
    runs-on: ubuntu-latest
    needs: code-validation
    env:
      SENTRY_LARAVEL_DSN: null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, json, bcmath, zip, pdo_mysql, redis
          coverage: none
          tools: composer:v2

      - name: Create Laravel storage directories
        run: |
          mkdir -p storage/framework/{sessions,views,cache,testing}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          mkdir -p resources/svg/heroicons
          chmod -R 775 storage bootstrap/cache

      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Create .env file and generate APP_KEY
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Run Laravel Pint (Code Style)
        run: ./vendor/bin/pint --test

      - name: Run PHPStan (Static Analysis)
        run: ./vendor/bin/phpstan analyse --memory-limit=2G --error-format=github

      - name: Run Psalm (Static Analysis with Baseline)
        run: ./vendor/bin/psalm --output-format=github --no-cache

  #=============================================================================
  # JOB 3: FRONTEND BUILD
  #=============================================================================
  frontend-build:
    name: Frontend Build & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Stylelint
        run: npm run stylelint

      - name: Build frontend assets
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: public/build
          retention-days: 7

  #=============================================================================
  # JOB 4: TESTING
  #=============================================================================
  testing:
    name: Testing (PHPUnit)
    runs-on: ubuntu-latest
    needs: [code-validation, static-analysis]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: coprra_test
          MYSQL_USER: coprra
          MYSQL_PASSWORD: coprra
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, json, bcmath, zip, pdo_mysql, redis, openssl, sqlite, pdo_sqlite
          coverage: xdebug
          tools: composer:v2

      - name: Create Laravel storage directories
        run: |
          mkdir -p storage/framework/{sessions,views,cache,testing}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          mkdir -p resources/svg/heroicons
          chmod -R 775 storage bootstrap/cache

      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Remove Rector to avoid php-parser conflict
        run: rm -rf vendor/rector

      - name: Copy .env.testing
        run: cp .env.testing .env

      - name: Configure SQLite DB for migrations
        run: |
          php -r '
            $env = file(".env");
            $env = array_filter($env, function($l){ return !preg_match("/^DB_CONNECTION=|^DB_DATABASE=/", $l); });
            $env[] = "DB_CONNECTION=sqlite\n";
            $env[] = "DB_DATABASE=database/database.sqlite\n";
            file_put_contents(".env", implode("", $env));
            echo "DB config set to sqlite file";
          '

      - name: Verify application key
        run: |
          if grep -q '^APP_KEY=' .env; then
            echo 'APP_KEY OK'
          else
            php -r "$env = file_get_contents('.env'); $key = base64_encode(random_bytes(32)); file_put_contents('.env', $env . PHP_EOL . 'APP_KEY=base64:' . $key . PHP_EOL); echo 'APP_KEY generated';"
          fi

      - name: Create SQLite database
        run: touch database/database.sqlite

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run Unit Tests
        run: ./vendor/bin/phpunit --testsuite Unit --log-junit reports/junit-unit.xml

      - name: Run Feature Tests
        run: ./vendor/bin/phpunit --testsuite Feature --log-junit reports/junit-feature.xml

      - name: Run Security Tests
        run: ./vendor/bin/phpunit --testsuite Security --log-junit reports/junit-security.xml
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: reports/
          retention-days: 7

  #=============================================================================
  # JOB 5: CODE COVERAGE
  #=============================================================================
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, json, bcmath, zip, pdo_mysql, redis, openssl, sqlite, pdo_sqlite
          coverage: xdebug
          tools: composer:v2

      - name: Create Laravel storage directories
        run: |
          mkdir -p storage/framework/{sessions,views,cache,testing}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          mkdir -p resources/svg/heroicons
          chmod -R 775 storage bootstrap/cache

      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Remove Rector to avoid php-parser conflict
        run: rm -rf vendor/rector

      - name: Copy .env.testing
        run: cp .env.testing .env

      - name: Configure SQLite DB for migrations
        run: |
          php -r '
            $env = file(".env");
            $env = array_filter($env, function($l){ return !preg_match("/^DB_CONNECTION=|^DB_DATABASE=/", $l); });
            $env[] = "DB_CONNECTION=sqlite\n";
            $env[] = "DB_DATABASE=database/database.sqlite\n";
            file_put_contents(".env", implode("", $env));
            echo "DB config set to sqlite file";
          '

      - name: Verify application key
        run: |
          if grep -q '^APP_KEY=' .env; then
            echo 'APP_KEY OK'
          else
            php -r "$env = file_get_contents('.env'); $key = base64_encode(random_bytes(32)); file_put_contents('.env', $env . PHP_EOL . 'APP_KEY=base64:' . $key . PHP_EOL); echo 'APP_KEY generated';"
          fi

      - name: Create SQLite database
        run: touch database/database.sqlite

      - name: Run tests with coverage
        run: ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

      - name: Check coverage threshold (85%)
        run: |
          COVERAGE=$(php -r '$xml = simplexml_load_file("coverage.xml"); $metrics = $xml->project->metrics; $coverage = ($metrics["coveredstatements"] / $metrics["statements"]) * 100; echo number_format($coverage, 2);')
          echo "Current coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 85% threshold"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets threshold"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
        continue-on-error: true

  #=============================================================================
  # JOB 6: CONFIGURATION VALIDATION
  #=============================================================================
  config-validation:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false

      - name: Validate nginx configuration
        run: |
          docker run --rm -v $(pwd)/docker/nginx.conf:/etc/nginx/nginx.conf:ro nginx:alpine nginx -t
        continue-on-error: true

      - name: Check for security vulnerabilities in Docker images
        run: |
          docker run --rm aquasec/trivy image nginx:alpine
        continue-on-error: true

  #=============================================================================
  # JOB 7: SECURITY SCANNING
  #=============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          submodules: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, json, bcmath
          coverage: none
          tools: composer:v2

      - name: Create Laravel storage directories
        run: |
          mkdir -p storage/framework/{sessions,views,cache,testing}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          mkdir -p resources/svg/heroicons
          chmod -R 775 storage bootstrap/cache

      - name: Cache Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run security checker
        run: composer audit --format=plain
        continue-on-error: true

      - name: Run PHPMD (PHP Mess Detector)
        run: ./vendor/bin/phpmd app text cleancode,codesize,controversial,design,naming,unusedcode
        # Technical Debt: PHPMD reports 500+ stylistic violations (short variables, static access to facades, coupling).
        # PHPStan Level max already enforces strict type safety. PHPMD violations are tracked but non-blocking.
        # TODO: Configure phpmd.xml with project-specific thresholds or remove PHPMD in favor of PHPStan-only validation.
        continue-on-error: true

  #=============================================================================
  # ARTIFACTS CONSUMER
  #=============================================================================
  artifacts-consumer:
    name: Download and Verify Artifacts
    runs-on: ubuntu-latest
    needs: [frontend-build, testing]
    steps:
      - name: Download Frontend Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: downloaded-frontend-build
      - name: Download Test Results Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: downloaded-test-results
      - name: List Downloaded Artifacts
        run: |
          ls -la downloaded-frontend-build || true
          ls -la downloaded-test-results || true

  #=============================================================================
  # FINAL: BUILD STATUS
  #=============================================================================
  build-success:
    name: ✅ All Checks Passed
    runs-on: ubuntu-latest
    needs: [code-validation, static-analysis, frontend-build, testing, coverage, config-validation, security-scan]
    if: success()
    steps:
      - name: Build Success
        run: |
          echo "🎉 All CI/CD checks passed successfully!"
          echo "✅ Code validation passed"
          echo "✅ Static analysis passed"
          echo "✅ Frontend build passed"
          echo "✅ All tests passed"
          echo "✅ Coverage threshold met"
          echo "✅ Configuration validation passed"
          echo "✅ Security scan completed"
