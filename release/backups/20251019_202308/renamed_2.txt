2025-10-19 - PureUnitTest
يوصى بتحديث أوامر التشغيل لإزالة الخيار `--verbose` غير المدعوم في PHPUnit 11، واعتماد خيارات مثل `--display-warnings` و`--display-deprecations` عند الحاجة.
كما يُستحسن ضبط الصرامة في `phpunit.xml` (مثلاً: failOnWarning=true, failOnRisky=true, beStrictAboutOutputDuringTests=true) لضمان أعلى معايير الجودة.
توصية: SmokeTest
- تعديل المسارات في الوثائق والأوامر إلى `tests/AI/SmokeTest.php` بدلاً من `tests/Smoke/SmokeTest.php` أو `tests/E2E/SmokeTest.php`.
- استخدام أمر PHPUnit 11 بدون خيارات غير مدعومة: `./vendor/bin/phpunit --display-warnings --display-deprecations --bootstrap tests/bootstrap.php tests/AI/SmokeTest.php`.
- مراجعة `phpunit.xml` لضبط إعدادات التحذيرات والمهجوريات بما يتوافق مع PHPUnit 11.
- نتيجة التشغيل الأخيرة: OK (1 اختبار، 1 تأكيد)، زمن التنفيذ `00:00.306`.

توصية: Unit Test - URLService
- لم يتم العثور على اختبار أو خدمة باسم URLService. يُوصى بإنشاء `tests/Unit/Services/URLServiceTest.php` يغطي:
  - بناء الروابط المطلقة والنسبية.
  - ترميز معاملات الاستعلام بشكل صحيح.
  - تطبيع المسارات والقضاء على الشرطتين المائلتين المكررتين.
  - التحقق من دعم مخططات http/https، ومعالجة unicode و UTF-8.
- يمكن الاسترشاد بالاختبارات الحالية: `tests/Feature/LinkCheckerTest.php` و `tests/Feature/RoutingTest.php`.
- أمر التشغيل المقترح:
  `./vendor/bin/phpunit --display-warnings --display-deprecations --bootstrap tests/bootstrap.php tests/Unit/Services/URLServiceTest.php`.

توصية: AdvancedTestHelper
- أداة مساعدة وليست اختباراً مباشراً؛ تم التحقق من الصياغة بنجاح.
- يُوصى باستخدامها داخل أدوات التشغيل الشاملة فقط وعدم استدعائها عبر PHPUnit مباشرة.

توصية: Test Utilities (Command/Runner/Validator/Reports)
- تم التحقق من الصياغة بنجاح لكل من:
  - `tests/TestUtilities/ComprehensiveTestCommand.php`
  - `tests/TestUtilities/ComprehensiveTestRunner.php`
  - `tests/TestUtilities/TestReportGenerator.php`
  - `tests/TestUtilities/TestReportProcessor.php`
  - `tests/TestUtilities/TestRunner.php`
  - `tests/TestUtilities/TestSuiteValidator.php`
- يُوصى بكتابة اختبارات وحده مخصصة لهذه الأدوات لاحقاً (إن لزم) عبر ملفات `*Test.php` منفصلة.

توصية: ValidationTestCase
- نتيجة التشغيل: OK (1 اختبار، 7 تأكيدات)، زمن التنفيذ `00:00.601`.
- يوصى بتمكين خيارات التحذيرات والمهجوريات في `phpunit.xml` لضبط الصرامة.

توصية: Mockery (Debug/Simple/Strict)
- جميع اختبارات Mockery نجحت:
  - MockeryDebugTest: OK (3 اختبارات، 3 تأكيدات)، زمن `00:11.358`.
  - SimpleMockeryTest: OK (3 اختبارات، 4 تأكيدات)، زمن `00:11.471`.
  - StrictMockeryTest: OK (3 اختبارات، 3 تأكيدات)، زمن `00:10.850`.
- توصية: الحفاظ على `xdebug.mode=off` أثناء التشغيل لتقليل زمن التنفيذ.

توصية: MockAIService
- الملف ليس TestCase؛ لا يُشغّل عبر PHPUnit مباشرة.
- يُوصى بإضافة ملف اختبار مستقل مثل `tests/AI/MockAIServiceTest.php` يمتد `PHPUnit\Framework\TestCase`.

توصية: TestErrorHandler
- نتيجة التشغيل: Risky (2 حالات)، زمن التنفيذ `00:06.023`.
- السبب: الكود الاختباري أو المُختبَر أزال معالجات أخطاء أخرى (SafeTestBase.php:81).
- توصية: عزل معالجات الأخطاء ضمن الاختبار أو استخدام spy/backup/restore للمعالج العام.
- يُنصح بضبط `failOnRisky=true` في `phpunit.xml` إذا أردت فشل صريح عند وجود مخاطر.

توصية: FactoriesTest
- نتيجة التشغيل: OK (3 اختبارات، 3 تأكيدات)، زمن التنفيذ `00:11.289`.
- يُوصى بتوسيع تغطية المصانع لتشمل السيناريوهات الفاشلة والتأكد من الرسائل الاستثنائية.

توصية: MockAIServiceTest
- نتيجة التشغيل: OK (4 اختبارات، 38 تأكيداً)، زمن التنفيذ `00:00.803`.
- التغطية: تحليل النص (sentiment)، تصنيف المنتج، توليد التوصيات، تحليل الصور.
- توصية: إضافة حالات حواف للنصوص المختلطة الإيجابية/السلبية، والتحقق من تعدد العلامات (tags) وعدم افتراض التفرد.

توصية: URLServiceTest
- نتيجة التشغيل: OK (3 اختبارات، 7 تأكيدات)، زمن التنفيذ `00:01.003`.
- التغطية: توليد رابط الأفلييت عبر نموذج Store، ترميز صحيح للروابط مع إبقاء الشرطات المائلة غير مشفّرة، والتعامل مع نقص الإعدادات.
- توصية: إضافة حالات لغياب placeholders أو وجود أحرف غير اعتيادية (Unicode/UTF-8)، والتحقق من سلامة نتائج المسارات العميقة.

تأكيد إعدادات PHPUnit
- `failOnRisky="true"` مفعّلة بالفعل في `phpunit.xml`؛ لا حاجة لتعديل إضافي حالياً.

توصية: Suite AI كامل
- شغّل Suite `AI` كاملاً بعد إضافة الاختبارات الجديدة لضمان الاتساق العام.
- أمر التشغيل: `./vendor/bin/phpunit --testsuite AI --display-warnings --display-deprecations --bootstrap tests/bootstrap.php`.
- حافظ على `xdebug.mode=off` للأداء؛ استخدم `pcov` للتغطية عند الحاجة فقط.

توصية: TestErrorHandler (عزل واسترجاع)
- نفّذ `set_error_handler` داخل `setUp()` و`restore_error_handler` داخل `tearDown()` لعزل المعالج ومنع التسرب.
- أضف اختباراً يثبت عودة المعالج الأصلي بعد كل حالة، وتحقق من عدم وجود أثر جانبي عالمي.
- استخدم Spy/Stub لمعاملات الأخطاء عند الإمكان، وتجنب تعديل المعالج العام خارج نطاق الاختبار.

توصية: CDNService
- أنشئ `tests/Unit/Services/CDNServiceTest.php` لتغطية: `getUrl`, `upload`, `purgeCache`, وقراءة `getMetadata` و`getStatistics`.
- استخدم Stub لـ `CDNProviderInterface` لضبط توقيع الروابط وسلوك المزود.
- اختبر حالات نقص الإعدادات في `config/cdn.php` وتأثيرها على ناتج الرابط.

توصية: AIRequestService
- أضف اختبارات تحقق من بناء الحمولة (payload) للنص مقابل الصور، وإدراج الرؤوس (headers) والمهلات (timeouts) وسياسات إعادة المحاولة (retries).
- تحقق من تطبيع المسارات والقيم قبل الإرسال، ومن التعامل مع قيم Unicode في المعاملات.

توصية: تنظيم الاختبارات والتغطية
- استخدم Data Providers لتوليد حالات متنوّعة بصورة منهجية.
- أضف تعليقات `@covers` لربط كل اختبار بالوحدات المستهدفة بدقة.
- نفّذ تغطية نصية عند الحاجة: `./vendor/bin/phpunit --coverage-text` مع `pcov` أو تمكين `xdebug` بشكل انتقائي.
- جدولة تشغيل التغطية في مهام ليلية لتجنّب بطء أثناء التطوير اليومي.

توصية: سكربتات تشغيل مريحة
- أضف سكربتات Composer مثل: `"test:ai": "phpunit --testsuite AI"`, `"test:unit": "phpunit --testsuite Unit"` لتوحيد أوامر التشغيل.
- حافظ على استخدام `--display-warnings` و`--display-deprecations` في السكربتات الافتراضية وفقاً لـ PHPUnit 11.
2025-10-19 - Trivy Security Scan
- تم إزالة المفتاح الخاص من `docker/ssl/coprra.key` واستبداله بحافظة فارغة آمنة.
- توصية: لا تحفظ مفاتيح/شهادات داخل المستودع. استخدم أسرار CI/CD (GitHub Actions Secrets) أو مجلد خارجي يُمرَّر كـ bind volume عند التشغيل المحلي.
- اقترح إضافة متغيرات بيئة `SSL_KEY_PATH` و`SSL_CERT_PATH` لاستخدامها في الـ Docker Compose بدل المسارات الثابتة.
- فعّل Trivy في CI ضمن `ci-comprehensive.yml` باستخدام `trivy fs . --scanners vuln,secret --severity HIGH,CRITICAL --format json` وارفَع التقرير كـ artifact.
- حسِّن زمن الفحص عبر `--skip-dirs tmp,node_modules,storage,bootstrap,build,dist,vendor,coverage,.cache,.git` و`--skip-files reports/phpunit_stop_on_error.xml` دون تقليل الصرامة.

[أمن الاعتماديات - Enlightn Security Checker]
- تأكد من توفر امتداد `zip` في PHP وأداة النظام `unzip` عند التشغيل المحلي.
- ضمن CI: خطوة `Setup PHP` مهيأة بالفعل بإضافة الامتداد `zip`، لذا يعمل الفحص دون مشاكل.
- للتشغيل داخل Docker محليًا:
  - استخدم صورة PHP كاملة أو ثبّت المتطلبات: `apt-get update && apt-get install -y unzip libzip-dev` ثم `docker-php-ext-install zip`.
  - بعد ذلك: `php vendor/bin/security-checker security:check --format=json > security-checker-report.json`.
- يوصى برفع تقرير `security-checker-report.json` كـ artifact ضمن تدفق الأمن (تم دمجه).
- أشغّل `gitleaks detect --no-git -f json -r gitleaks-report.json` في CI، مع الاعتماد على `.gitleaks.toml` الافتراضي في الجذر.
- أُبقي الفحص مركزًا على الشفرة الفعلية (`app/`, `config/`, `routes/`, `resources/`, `tests/`) حيث أكّد التقرير الحالي `[]` عدم وجود تسريبات فعلية.
- أُعالج أية تسريبات مستقبلية باستبدال القيم الصريحة بمتغيرات بيئة (`.env`) أو مخزن أسرار CI/CD.
- أُحدّث سكربت `audit.ps1` لإضافة خيار `-f json -r gitleaks-report.json` وقراءة `.gitleaks.toml` تلقائيًا.
- ملاحظة: ملف `.gitleaksignore` يقبل بصمة `fingerprint=<hash>` لتجاهل نتائجة؛ لا يُستخدم لتجاهل مجلدات عامة، لذا نُفضّل التهيئة عبر `.gitleaks.toml`.

[تحسينات CI لـ Enlightn]
- فشل البناء الصريح: أُضيفت خطوة تقييم JSON (باستخدام `actions/github-script`) تحسب عدد الحزم المصابة وتُفشل البناء برسالة واضحة عند وجود نتائج؛ مع الإبقاء على رفع التقارير `artifacts` دائمًا.
- تعليقات تلقائية على PR: أُضيفت خطوة تُنشئ/تُحدّث تعليقاً على طلبات الدمج يحمل ملخصًا لأعلى 10 حزم المصابة وعلامة مميّزة `<!-- enlightn-security-checker -->` لمنع التكرار.
- تخصيص الحساسية: يمكن تعديل منطق التقييم لاحقًا لحساب عدد الاستشارات (advisories) بدلاً من عدد الحزم، أو تجاهل مستويات معينة إن لزم.
- أفضل ممارسة: أبقي التعليق مختصرًا مع الإحالة إلى artifact `security-checker-report.json` للتفاصيل.

[إدارة مفاتيح SSL والأسرار]
- لا تُخزّن المفاتيح الخاصة داخل المستودع؛ استخدم ملفات placeholder فقط مثل `docker/ssl/coprra.key` وحقن القيم أثناء التشغيل.
- استخدم أسرار GitHub (`secrets`) لتمرير القيم الحساسة إلى الـ CI، أو حلول إدارة الأسرار مثل Vault/SOPS لتشفيرها خارج المستودع.
- في التشغيل المحلي/الحاويات، مرر المسار عبر متغير بيئة مثل `SSL_KEY_PATH`، ثم اربطه في الـ Docker (volume) بدلًا من تضمين الملف مباشرة.
- حدّث `docker-compose` لقراءة المسار من البيئة وإرفاقه كمجلد: مثلًا `- ${SSL_KEY_PATH}:/etc/ssl/private/copra.key:ro`.

[تشغيل actionlint محليًا]
- على ويندوز: ثبّت `actionlint` عبر Scoop: `scoop install actionlint`، أو نزّل الملف التنفيذي من GitHub Releases.
- نفّذ الفحص: `.\actionlint -color never -format tap .github/workflows/security-audit.yml`.
- إذا كان الملف التنفيذي الموجود في الجذر غير قابل للتشغيل على ويندوز، استخدم النسخة الخاصة بـ Windows (`actionlint.exe`) أو ثبّت عبر مدير الحزم.

[جدولة الفحوص وإدارة التقارير]
- تم تفعيل جدول يومي عند الثالثة صباحًا؛ يمكنك تعديل التوقيت حسب عبء العمل أو إضافة تشغيل أسبوعي موسّع.
- اضبط `retention-days` وفق سياسة الاحتفاظ (مثال 7–30 يومًا) للحفاظ على التقارير عند التحقيقات الأمنية.
- استخدم قواعد الفرع لتشترط نجاح فحص الأمن قبل الدمج (`branch protection rules`).

[حدود الفشل وسياسات الحساسية]
- يمكن تغيير شرط الفشل لقياس عدد الاستشارات الأمنية بدل عدد الحزم، أو الفشل فقط عند الاستشارات الحرجة.
- أضف استثناءات مدروسة لحالات محدّدة باستخدام ملف تجاهل موثّق، وتجنّب التوسّع في التجاهل كي لا يقلّ المستوى الأمني.

[تحديث الاعتماديات تلقائيًا]
- فعّل `Dependabot` لتحديثات Composer وNPM، أو استخدم `Renovate` لتجميع التحديثات والتحكم في السياسات.
- اربط فحوص الأمن بعمليات التحديث لضمان منع إدخال مكتبات مصابة عبر آلية الدمج المحمية.