اقتراحات وتوصيات لتحسين المشروع

1) CI/CD
- توحيد إصدار PHP عبر جميع الـ Workflows (8.2 أو 8.3) لتثبيت الأدوات.
- استخدام مصفوفة (matrix) لاختبار نسخ متعددة من PHP و MySQL عند الحاجة.
- إضافة خطوة Healthcheck بعد النشر للتحقق من نقاط نهاية حساسة (مثل /api/health).
- رفع تقارير التغطية (coverage) بصيغة موحدة وإرفاقها في الـ Pull Requests.

2) Docker وبيئة التشغيل
- إضافة Healthcheck لخدمة php-fpm ولحاوية التطبيق.
- مراجعة سياسة الوصول إلى مجلد uploads؛ يفضّل تقديم الملفات عبر التطبيق وليس مباشرة.
- مراجعة ضبط `fastcgi_read_timeout` لتقليل زمن الانتظار غير الضروري، والتمييز بين طلبات ثقيلة وخفيفة.
- استخدام `ZipArchive` بديلًا لـ `tar` على ويندوز عند الضرورة لتحسين توافقية النسخ الاحتياطي.

3) الأمن
- حصر استثناءات CSRF في بيئة الاختبار فقط وعدم توسيعها للإنتاج.
- مراجعة معدلات الطلب (throttling) لمسارات تسجيل الدخول وواجهات API.
- إضافة `Content-Security-Policy` أكثر صرامة إن وُجدت أصول خارجية.
- الاستمرار في تشغيل أدوات مثل Gitleaks وEnlightn ضمن الجدولة.

4) الأداء والمراقبة
- تمكين وتتبع مؤشرات الأداء عبر Prometheus/Grafana (متاح في مجلد docker).
- فحص الاستعلامات البطيئة في MySQL وتفعيل `slow_query_log` عند الحاجة.
- مراقبة استهلاك الذاكرة والـ CPU للحاويات وضبط الحدود في Compose.

5) الاختبارات والجودة
- الاستمرار في توسيع اختبارات التكامل للسيناريوهات الحرجة (النسخ الاحتياطي، الاستعادة).
- إضافة اختبارات تغطية لمسارات رفع/عرض الملفات وتقييم سياسات الوصول.
- ربط فشل الأدوات الثابتة (PHPStan/Psalm/PHPMD) بإيقاف الـ CI لمنع دمج الشفرات المخالفة.

6) التوثيق والتشغيل
- توثيق خطوات التشغيل والإعداد ضمن `README` وملفات `docs/`.
- إضافة قسم `Known Issues` و`Workarounds` (مثل مشاكل tar على ويندوز) مع حلول بديلة.
- توثيق متطلبات الإنتاج (بيئة PHP/Redis/MySQL) وقيم البيئة الحساسة.

هذه التوصيات قصيرة ومتوسطة الأجل وتدعم الاستقرار والأمن وقابلية التطوير على المدى القريب.